using UnityEngine;
using System.Collections;
using System;

public class UI : MonoBehaviour
{
	// All access should go through instance and you are trusted not to set it :)
	static private UI instance = null;


	static public UI Instance { 
		get {
			if (instance == null) {
				// Store a temporary UI component in the main camera's game object.
				// This game object just happens to be convenient because we can safely assume it exists.
				instance = Camera.main.gameObject.AddComponent<UI>();
			}
			return instance; 
		}
		set { instance = value; }
	}



	static public UIToolkit firstToolkit = null; // we stick the first available toolkit so when using one atlas the API remains simple

	public int drawDepth = 100;	
	public LayerMask UILayer = 1 << 8; // automatically select the UI layer 
	[HideInInspector]
	public int layer;

	private AudioSource _audioSource;
	private Camera _uiCamera;
	private GameObject _uiCameraHolder;
	private UIToolkit[] _toolkitInstances;

	// if set to true, the texture will be chosen and loaded from textureName
	// the base texture to use. If HD/retina, textureName2x will be loaded.  Both need to be in Resources.
	// this also doubles as the name of the json config file generated by Texture Packer
	public bool autoTextureSelectionForHD = true;
	public int maxWidthOrHeightForSD = 900; // if the width/height of the screen equals or exceeds this size HD mode will be triggered
	[HideInInspector]
	public bool isHD = false;
	public string hdExtension = "-hd";


	#region Unity MonoBehaviour Functions

	private void Awake()
	{
		// Set instance to this so we can be accessed from anywhere
		Instance = this;

		// add the audio source if we dont have one and cache it
		_audioSource = GetComponent<AudioSource>();
		if( _audioSource == null )
			_audioSource = gameObject.AddComponent<AudioSource>();

		// Create the camera
		_uiCameraHolder = new GameObject();
		_uiCameraHolder.transform.parent = gameObject.transform;
		_uiCameraHolder.AddComponent( "Camera" );

		_uiCamera = _uiCameraHolder.camera;
		_uiCamera.name = "UICamera";
		_uiCamera.clearFlags = CameraClearFlags.Depth;
		_uiCamera.nearClipPlane = 0.3f;
		_uiCamera.farClipPlane = 5000.0f;
		_uiCamera.depth = drawDepth;
		_uiCamera.rect = new Rect( 0.0f, 0.0f, 1.0f, 1.0f );
		_uiCamera.orthographic = true;
		_uiCamera.orthographicSize = Screen.height / 2;

		// Set the camera position based on the screenResolution/orientation
		_uiCamera.transform.position = new Vector3( Screen.width / 2, -Screen.height / 2, -10.0f );
		_uiCamera.cullingMask = UILayer;

		// Cache the layer for later use when adding sprites
		// UILayer.value is a mask, find which bit is set 
		for( int i = 0; i < sizeof( int ) * 8; i++ )
		{
			if( ( UILayer.value & (1 << i) ) == (1 << i) )
			{
				layer = i;
				break;
			}
		}

		// setup the HD flag
		// handle texture loading if required
#if UNITY_EDITOR || UNITY_STANDALONE_OSX || UNITY_STANDALONE_WIN || UNITY_WEBPLAYER
		var deviceAllowsHD = true;
#else
		var generation = iPhoneSettings.generation;
		var deviceAllowsHD =
				generation != iPhoneGeneration.iPhone3G &&
				generation != iPhoneGeneration.iPhone3GS &&
				generation != iPhoneGeneration.iPodTouch1Gen &&
				generation != iPhoneGeneration.iPodTouch2Gen &&
				generation != iPhoneGeneration.iPodTouch3Gen;
#endif
		if( autoTextureSelectionForHD && deviceAllowsHD )
		{
			// are we laoding up a 2x texture?
#if UNITY_EDITOR
			if( Screen.width >= 500 || Screen.height >= 500 ) // for easier testing in the editor
#else
			if( Screen.width >= maxWidthOrHeightForSD || Screen.height >= maxWidthOrHeightForSD )
#endif
			{
				isHD = true;
			}
		}

		// grab all our child UIToolkits
		_toolkitInstances = GetComponentsInChildren<UIToolkit>();
        if (_toolkitInstances.Length > 0) {
            firstToolkit = _toolkitInstances[0];
        }


		// kick off the loading of texture for any UIToolkits we have
		foreach( var toolkit in _toolkitInstances )
			toolkit.loadTextureAndPrepareForUse();
	}


    //callback for when no buttons are clicked
#if UNITY_EDITOR || UNITY_STANDALONE_OSX || UNITY_STANDALONE_WIN || UNITY_WEBPLAYER
      public static event Action<UIFakeTouch> TapMissed;
#else
      public static event Action<Touch> TapMissed;
#endif

    void Update() {
        //pass touch information to UIs
#if UNITY_EDITOR || UNITY_STANDALONE_OSX || UNITY_STANDALONE_WIN || UNITY_WEBPLAYER
        UIFakeTouch touch = default(UIFakeTouch);
#else
        Touch touch = default(Touch);
#endif
        bool consumed = false;
        foreach (var toolkit in _toolkitInstances) {
            consumed = true;
            toolkit.HandleTouches(t => {
                touch = t;
                consumed = false;
            });
            if (consumed) break;
        }

        if (TapMissed != null && !consumed) TapMissed(touch);
    }

	public void addToolkit(UIToolkit tk) {

		tk.transform.parent = Instance.transform;

		// grab all our child UIToolkits
		_toolkitInstances = GetComponentsInChildren<UIToolkit>();

		// kick off the loading of texture for any UIToolkits we have
		foreach( var toolkit in _toolkitInstances ){
			toolkit.loadTextureAndPrepareForUse();
		}

	}

	public bool buttonAtPosition(Vector2 position) {
		Vector2 fixedPosition = new Vector2(position.x, Screen.height - position.y);
		foreach( var toolkit in _toolkitInstances) {
			if (toolkit.getButtonForScreenPosition(fixedPosition) != null) {
				return true;
			}
		}
		return false;
	}

	// Ensures that the instance is destroyed when the game is stopped
	protected void OnApplicationQuit()
	{
		Instance = null;
		firstToolkit = null;
	}


	protected void OnDestroy()
	{
		Instance = null;
		firstToolkit = null;
	}

	#endregion


	public void playSound( AudioClip clip )
	{
		_audioSource.PlayOneShot( clip );
	}

}